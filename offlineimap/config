[general]
metadata = ~/.cache/offlineimap
accounts = elegion, dmedvinsky
maxsyncaccounts = 2
ui = TTYUI
ignore-readonly = no
#socktimeout = 30
fsync = false

[Account elegion]
localrepository = LocalElegion
remoterepository = RemoteElegion
status_backend = sqlite

[Repository LocalElegion]
type = Maildir
localfolders = ~/.mail/elegion
sep = .
restoreatime = no
nametrans = lambda folder: {'drafts': 'Drafts',
                            'sent':   'Sent Items',
                            'trash':  'Deleted Items',
                           }.get(folder, folder)

[Repository RemoteElegion]
type = IMAP
ssl = yes
cert_fingerprint = 4b4f4b14b6d0d84cbad805417501ce0fac523530
remotehost = mail.e-legion.com
remoteuser = dmitry.medvinsky
idlefolders = ['INBOX']
subscribedonly = no
folderfilter = lambda x: x.startswith('INBOX') or x in ['Sent Items',
                                                        'Drafts',
                                                        'Deleted Items']
nametrans = lambda folder: {'Drafts':        'drafts',
                            'Sent Items':    'sent',
                            'Deleted Items': 'trash',
                           }.get(folder, folder)


[Account dmedvinsky]
localrepository = LocalDmedvinsky
remoterepository = RemoteDmedvinsky
status_backend = sqlite

[Repository LocalDmedvinsky]
type = Maildir
localfolders = ~/.mail/dmedvinsky
sep = .
restoreatime = no
nametrans = lambda folder: {'drafts':  '[Gmail]/Drafts',
                            'sent':    '[Gmail]/Sent Mail',
                            'flagged': '[Gmail]/Starred',
                            'trash':   '[Gmail]/Trash',
                            'archive': '[Gmail]/All Mail',
                            }.get(folder, folder)

[Repository RemoteDmedvinsky]
type = Gmail
sslcacertfile = ~/.config/offlineimap/equifax.crt
maxconnections = 1
remoteuser = me@dmedvinsky.name
nametrans = lambda folder: {'[Gmail]/Drafts':    'drafts',
                            '[Gmail]/Sent Mail': 'sent',
                            '[Gmail]/Starred':   'flagged',
                            '[Gmail]/Trash':     'trash',
                            '[Gmail]/All Mail':  'archive',
                            }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             '[Gmail]/Spam',
                                            ]
