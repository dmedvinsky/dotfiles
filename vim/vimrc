let mapleader = "\<Space>"
let maplocalleader = "\<Space>"

" Plugins {{{1
set runtimepath+=$HOME/.config/vim/
call plug#begin('~/.config/vim/bundles')

Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'svermeulen/vim-NotableFt'
Plug 'w0rp/ale'
" Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
" Plug 'tpope/vim-sensible'
" Plug 'tpope/vim-rsi'

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-operator-user'
Plug 'wellle/targets.vim'
Plug 'Julian/vim-textobj-variable-segment'

Plug 'tpope/vim-git'
Plug 'hynek/vim-python-pep8-indent'
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'
" Plug 'fatih/vim-go'
" Plug 'vim-ruby/vim-ruby'
" Plug 'slim-template/vim-slim'
" Plug 'aliva/vim-fish'
" Plug 'othree/html5.vim'

Plug 'morhetz/gruvbox'

call plug#end()

set background=dark
colorscheme gruvbox

nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gg :Ggrep <C-r><C-w><CR>

nnoremap <leader>t :TagbarOpenAutoClose<CR>

" nmap coq <plug>(QuickScopeToggle)

let g:ctrlp_use_caching = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
if has('win32')
    let g:ctrlp_cache_dir = $TEMP.'/ctrlp'
endif
let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git', 'git -C %s ls-files . -co --exclude-standard'],
        \ 2: ['.hg', 'hg --cwd %s status -numac -I . $(hg root)'],
    \ },
    \ 'fallback': 'find %s -type f',
    \ }

let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['java'] }
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_cpp_compiler_options = '-std=c++11'

let g:ale_sign_column_always = 1
let g:ale_lint_on_text_changed = 'always'
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_fixers = {
\   'python': [
\       'black',
\       'isort',
\   ],
\}


nnoremap <silent> <leader>af :ALEFix<CR>
" }}}1

" Options {{{1
set cpoptions+=J

set nomodeline  " modeline is a security issue

set termencoding=utf-8
set fileencodings=utf-8,windows-1251,iso-8859-15,koi8-r
set encoding=utf-8

set novisualbell t_vb=
set title
set ttyfast
set lazyredraw
set mousehide
set hidden
set virtualedit=all
set nojoinspaces
set formatoptions-=t  " Do not auto-wrap text using textwidth
set formatoptions+=c  " Auto-wrap comments using textwidth
set formatoptions+=r  " Insert comment leader on Enter in insert mode
set formatoptions-=o  " Do not continue comments when pressing o/O
set formatoptions+=q  " Allow gq on comments
set formatoptions+=l  " Don't break long lines if it was long when entering insert mode
set formatoptions+=1  " Don't break after 1-letter word, break before it
set formatoptions+=j  " Remove comment leader wehn joining lines
set shellslash
set autoread
set autowrite

set scrolljump=1
set scrolloff=5
set sidescrolloff=10
set sidescroll=10

set incsearch
set hlsearch
set wrapscan
set ignorecase
set smartcase
set noinfercase
set gdefault

set autoindent
set smartindent
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set smarttab

set backspace=indent,eol,start
set complete-=i

set nowrap
set showmatch
set list
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
if !has('win32') && (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
endif

if exists('&colorcolumn')
    set colorcolumn=80
endif

set foldmethod=indent
set foldlevel=20

filetype plugin indent on

syntax enable

set wildmenu
set wildcharm=<TAB>
set wildmode=list:longest

set wildignore+=.git,.hg,_darcs,.svn
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.pyc,*.pyo
set wildignore+=*.hi
set wildignore+=*.luac
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.spl
set wildignore+=*.sw?
set wildignore+=*.DS_Store?
set wildignore+=*.mo
set wildignore+=*.class
set wildignore+=node_modules
set wildignore+=.env

set nobackup
set directory=$HOME/.cache/vim//
set viminfo='128,/32,:32,<64,@32,s10,h,n$HOME/.cache/vim/viminfo
set sessionoptions=blank,buffers,curdir,slash,tabpages,unix
set cryptmethod=blowfish

set diffopt+=iwhite

set splitright
set splitbelow

set fillchars=""  " Get rid of the silly characters in window separators
set cmdheight=1
set cmdwinheight=3

set laststatus=2

set statusline=%*\ %f\ %<
set statusline+=%1*%m%*
set statusline+=%1*%r%*
set statusline+=%=
set statusline+=\ %{&fileformat}\ %{&fileencoding}
set statusline+=\ %{strlen(&filetype)>0?&filetype:'no-ft'}
set statusline+=\ %04b/0x%03B
set statusline+=\ %03vx%3*%03l%*/%03L
set statusline+=%*

set numberwidth=3
set number
if exists('&relativenumber')
    set norelativenumber
endif

if has('gui_running') " {{{2
    set mouse=a
    set mousemodel=popup

    set guioptions-=T  " No toolbar
    set guioptions-=l  " No scrollbars
    set guioptions-=r
    set guioptions-=L
    set guioptions-=R
    set guioptions-=m  " No menu

    set guicursor=n-v-c:block-Cursor-blinkon0
    set guicursor+=ve:ver35-Cursor
    set guicursor+=o:hor50-Cursor
    set guicursor+=i-ci:ver25-Cursor
    set guicursor+=r-cr:hor20-Cursor
    set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon17

    set guifont=Iosevka-SS14-Extended:h15
    if has('gui_macvim')
        set macligatures
    endif
endif " }}}2

set synmaxcol=512
" }}}1

" Mappings {{{1

" Navigate by screen lines, not real lines.
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Better moving by paragraph.
" nnoremap <expr> { len(getline(line('.')-1)) > 0 ? '{+' : '{-'
" nnoremap <expr> } len(getline(line('.')+1)) > 0 ? '}-' : '}+'

" Very magic search by default.
nnoremap / /\v

" Y behaves more like D, i.e. yanks to the end of line.
nnoremap Y y$

" Center screen on search match.
nnoremap n nzzzv
nnoremap N Nzzzv

" Select just pasted text.
nnoremap gp V`]

" Paste in visual mode without losing register content.
xnoremap <expr> p v:register=='"'?'pgvy':'p'

" Write as sudo
cnoremap w!! w !sudo tee % >/dev/null

" Delete current file
cnoremap rm! call delete(expand('%:p')) \| bdelete!

nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Highlight all instances of the current word under the cursor
nnoremap <silent> <leader>hh :setl hls<CR>:let @/="\\<<C-r><C-w>\\>"<CR>

" Quick vimrc editing.
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>rv :source $MYVIMRC<cr>

nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>

nnoremap <Backspace> <C-W>w

" Good vacant mappings.
" nnoremap U <nop>
" nnoremap K <nop>
" nnoremap <Del> <nop>
" nnoremap <CR> <nop>
" nnoremap _ <nop>
" nnoremap \| <nop>
" }}}1

" Autocommands {{{1
if has("autocmd")
    augroup FTOptions " {{{2
        autocmd!
        autocmd FileType vim setl fdm=marker sw=4 sts=4 ts=4
        autocmd FileType mail setl wrap
        autocmd FileType gitcommit setl spell

        autocmd FileType css,scss,sass,stylus setl sw=2 sts=2 ts=2 et nosi
        autocmd FileType cpp setl sw=4 sts=4 ts=4 et
        autocmd FileType fish setl sw=4 sts=4 ts=4 et
        autocmd FileType go setl sw=4 sts=4 ts=4 noet
        autocmd FileType haskell setl sw=4 sts=4 ts=4 et
        autocmd FileType html,htmldjango,liquid setl sw=2 sts=2 ts=2 et
        autocmd FileType lisp setl cms=;;%s
        autocmd FileType python setl sw=4 sts=4 ts=4 et nosi
        autocmd FileType ruby setl sw=2 sts=2 ts=2 et nosi
        autocmd FileType rust setl sw=4 sts=4 ts=4 et nosi
    augroup END " }}}2

    augroup Misc " {{{2
        autocmd!
        " autocmd FocusLost * :wa
        autocmd VimResized * exe "normal! \<c-w>="
    augroup END " }}}2

    augroup Whitespace " {{{2
        autocmd!
        " Highlight EOL whitespace, http://vim.wikia.com/wiki/Highlight_unwanted_spaces
        autocmd ColorScheme * highlight ExtraWhitespace ctermbg=darkred guibg=#382424
        autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
        " the above flashes annoyingly while typing, be calmer in insert mode
        autocmd InsertLeave * match ExtraWhitespace /\s\+$/
        autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    augroup END " }}}2

    augroup command_window
        autocmd!
        " Have <Ctrl-C> leave cmdline-window.
        autocmd CmdwinEnter * nnoremap <buffer> <C-c> :q\|echo ""<cr>
        autocmd CmdwinEnter * inoremap <buffer> <C-c> <esc>:q\|echo ""<cr>
        " Start command line window in insert mode and no line numbers.
        autocmd CmdwinEnter * startinsert
        autocmd CmdwinEnter * setl nonumber
        autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
    augroup END
end
" }}}1

" Commands {{{1

" Visual star {{{
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction

vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>
" }}}
" Fix whitespace {{{
highlight ExtraWhitespace ctermbg=darkred guibg=#382424

function! s:FixWhitespace(line1,line2)
    let l:save_cursor = getpos(".")
    silent! execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//'
    call setpos('.', l:save_cursor)
endfunction

" Run :FixWhitespace to remove end of line white space.
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>,<line2>)
" }}}

" }}}

" Abbreviations {{{1
function! EatChar(pat)
    let c = nr2char(getchar(0))
    return (c =~ a:pat) ? '' : c
endfunction

function! MakeSpacelessIabbrev(from, to)
    execute "iabbrev <silent> ".a:from." ".a:to."<C-R>=EatChar('\\s')<CR>"
endfunction

call MakeSpacelessIabbrev('***', '*args, **kwargs')
call MakeSpacelessIabbrev('pdb', 'breakpoint()')

iab wekk week
iab Wekk Week
iab chage change
iab Chage Change
iab reutrn return
iab reutn return
iab reurn return
iab labmda lambda
iab consoel console
" }}}

if filereadable($HOME."/.vim/local/vimrc")
    set runtimepath+=$HOME/.vim/local/
    source $HOME/.vim/local/vimrc
endif
